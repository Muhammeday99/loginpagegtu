{"version":3,"sources":["Login/ExitButton.js","Login/login.js","serviceWorker.js","index.js"],"names":["ExitBtn","props","state","href","type","className","React","Component","Login","isLoginOpen","isRegisterOpen","this","setState","onClick","showLoginBox","bind","showRegisterBox","LoginBox","username","password","errors","elm","msg","prevState","newArr","err","push","e","target","value","clearValidationErr","showValidationerr","usernameErr","passwordErr","htmlFor","name","placeholder","onChange","onUsernameChange","onPasswordChange","submitLogin","RegisterBox","email","emailErr","onEmailChange","submitRegister","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57bc52c9.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { Link } from \"react-router\"\nimport \"./ExitBtn.css\";\n\nclass ExitBtn extends React.Component{\n    constructor(props){\n        super(props);\n            this.state = {}\n    }\n    render(){\n        return(\n            <div>\n                <a href=\"http://Muhammeday99.github.io/loginpagegtu\">\n                <button type=\"button\" className=\"exitbtn\" >\n                Exit\n                </button>\n                </a>\n            </div>\n        )\n    }\n\n}\n\nexport default ExitBtn;","import React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport \"./Login.css\";\nimport ExitBtn from \"./ExitButton\";\n\nclass Login extends Component{\n\n  constructor(props){\n    super(props);\n    this.state = { isLoginOpen: true, isRegisterOpen: false};\n\n  }\n\n  showRegisterBox(){\n    this.setState({isRegisterOpen: true,isLoginOpen: false})\n  }\n  showLoginBox(){\n    this.setState({isRegisterOpen: false,isLoginOpen: true})\n  }\n  render(){\n    return(\n      <div>\n      <ExitBtn />\n      <div className=\"root-container\">\n        <div className=\"box-controller\">\n          <div className={\"controller \" + (this.state.isLoginOpen ? \"selected-controller\" : \"\")} onClick={this.showLoginBox.bind(this)}>\n            Login\n          </div>\n          <div className={\"controller \"+ (this.state.isRegisterOpen ? \"selected-controller\" : \"\")} onClick={this.showRegisterBox.bind(this)}>\n            Register\n          </div>\n        </div>\n        <div className=\"box-cont\">\n          {this.state.isLoginOpen && <LoginBox />}\n          {this.state.isRegisterOpen && <RegisterBox />}\n        </div>\n      </div>\n      </div>\n    )\n  }\n}\n\nclass LoginBox extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = { username : \"\", password : \"\", errors: [] };\n  }\n\n  showValidationerr(elm, msg){\n    this.setState((prevState)=> ({errors: [...prevState.errors, { elm, msg }] }));\n  }\n\n  clearValidationErr(elm){\n    this.setState((prevState) => {\n      let newArr = [];\n      for(let err of prevState.errors) {\n        if(elm != err.elm){\n          newArr.push(err);\n        }\n      }\n      return {errors: newArr};\n    })\n  }\n\n  onUsernameChange(e){\n    this.setState({ username: e.target.value });\n    this.clearValidationErr(\"username\");\n  }\n\n  onPasswordChange(e){\n    this.setState({ password: e.target.value });\n    this.clearValidationErr(\"password\");\n  }\n\n  submitLogin(e){\n   if(this.state.username == \"\"){\n      this.showValidationerr(\"username\", \"Username connot be empty!\");\n   } \n   if(this.state.password == \"\"){\n      this.showValidationerr(\"password\", \"Password connot be empty!\");\n   }\n  }\n  render(){\n    let usernameErr = null,passwordErr = null;\n\n    for(let err of this.state.errors){\n      if(err.elm == \"username\"){\n        usernameErr = err.msg;\n      } \n      if(err.elm == \"password\"){\n        passwordErr = err.msg;\n      }\n    }\n\n    return(\n      <div className=\"inner-cont\">\n        <div className=\"header\">\n          Login\n        </div>\n        <div className=\"box\">\n        <div className=\"input-group\">\n          <label htmlFor=\"username\">Username</label>\n          <input type=\"text\" name=\"username\" className=\"login-input\" placeholder=\"Username\"\n          onChange={this.onUsernameChange.bind(this)}/>\n          <small className=\"danger-error\">{usernameErr ? usernameErr : \"\"}</small>\n        </div>\n\n        <div className=\"input-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input type=\"password\" name=\"password\" className=\"login-input\" placeholder=\"Password\"\n          onChange={this.onPasswordChange.bind(this)}/>\n          <small className=\"danger-error\">{passwordErr ? passwordErr : \"\"}</small>\n        </div>\n\n        <button type=\"button\" className=\"login-btn\" onClick={this.submitLogin.bind(this)}>Login</button>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nclass RegisterBox extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = { username : \"\", password : \"\", email : \"\", errors: [] };\n  }\n\n  showValidationerr(elm, msg){\n    this.setState((prevState)=> ({errors: [...prevState.errors, { elm, msg }] }));\n  }\n\n  clearValidationErr(elm){\n    this.setState((prevState) => {\n      let newArr = [];\n      for(let err of prevState.errors) {\n        if(elm != err.elm){\n          newArr.push(err);\n        }\n      }\n      return {errors: newArr};\n    })\n  }\n\n  onUsernameChange(e){\n    this.setState({ username: e.target.value });\n    this.clearValidationErr(\"username\");\n  }\n  \n  onEmailChange(e){\n    this.setState({ email: e.target.value });\n    this.clearValidationErr(\"email\");\n  }\n\n  onPasswordChange(e){\n    this.setState({ password: e.target.value });\n    this.clearValidationErr(\"password\");\n  }\n\n  submitRegister(e){\n    if(this.state.username == \"\"){\n       this.showValidationerr(\"username\", \"Username connot be empty!\");\n    }\n    if(this.state.email == \"\"){\n       this.showValidationerr(\"email\", \"Email connot be empty!\");\n    } \n    if(this.state.password == \"\"){\n       this.showValidationerr(\"password\", \"Password connot be empty!\");\n    }\n\n\n  }\n  render(){\n\n    let usernameErr = null,passwordErr = null, emailErr = null;\n\n    for(let err of this.state.errors){\n      if(err.elm == \"username\"){\n        usernameErr = err.msg;\n      } \n      if(err.elm == \"email\"){\n        emailErr = err.msg;\n      } \n      if(err.elm == \"password\"){\n        passwordErr = err.msg;\n      }\n    }\n\n    return(\n      <div className=\"inner-cont\">\n        <div className=\"header\">\n          Register\n        </div>\n        <div className=\"box\">\n        <div className=\"input-group\">\n          <label htmlFor=\"username\">Username</label>\n          <input type=\"text\" name=\"username\" className=\"login-input\" placeholder=\"Username\" \n          onChange={this.onUsernameChange.bind(this)}/>\n          <small className=\"danger-error\">{usernameErr ? usernameErr : \"\"}</small>\n        </div>\n\n        <div className=\"input-group\">\n          <label htmlFor=\"email\">Email</label>\n          <input type=\"email\" name=\"email\" className=\"login-input\" placeholder=\"Email\"\n          onChange={this.onEmailChange.bind(this)}/>\n          <small className=\"danger-error\">{emailErr ? emailErr : \"\"}</small>\n        </div>\n\n        <div className=\"input-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input type=\"password\" name=\"password\" className=\"login-input\" placeholder=\"Password\"\n          onChange={this.onPasswordChange.bind(this)}/>\n          <small className=\"danger-error\">{passwordErr ? passwordErr : \"\"}</small>\n        </div>\n\n        <button type=\"button\" className=\"login-btn\" onClick={this.submitRegister.bind(this)}>Register</button>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Login\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Login from './Login/login';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Login />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}